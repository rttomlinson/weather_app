#!/usr/bin/env node

"use strict";

/** Module dependencies **/

let app = require('../app');
let debug = require('debug')('weather_app:server');
let http = require('http');


/**Get port**/

let port = normalizePort(process.env.port || '8080');
app.set('port', port);


/** Create http server **/

let server = http.createServer(app);

/** Listen on provided port and attach listeners for err and listening **/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**Normalize a port into a number, string, or false **/
function normalizePort(val) {
    let port = parseInt(val, 10); //If string, parse it
    
    if (isNaN(port)) {
        //named piped
        return val;
    }
    if (port >= 0) {
        //port number
        return port;
    
    }
    return false; //Otherwise bad input?
}


/**Event listener for http error event**/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error; //defer error handling to default handler
    }
    
    var bind = typeof port === 'string'
    ? 'Pipe' + port
    : 'Port' + port;
    
    //handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDINUSE':
            console.error(bind + ' already in use');
            process.exit(1);
            break;
        default:
            throw error; //defer error handling to build-in handler
    }
}



/** Event listener for 'listening event**/

function onListening() {
    let address = server.address();
    let bind = typeof address === 'string'
    ? 'pipe' + address
    : 'port' + address.port;
    debug('Listening on ' + bind);
}
















